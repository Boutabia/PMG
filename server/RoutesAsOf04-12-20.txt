/**
 * All /api/content HTTP methods go to content.
 */

app.use("/api/content", contentRouter);

      /**
    * A POST that can insert categories to the category -table. Only name is needed.
    * Variable should be a string named "newCategoryName".
    */
   POST api/content/category

   /**
    * scenarioInserting POST. Should receive following:
    * string "scenarioNameVar", int[] "scenarioCategoryVar", int "questionTypeVar",
    * string "questionTextVar"(300), string "pictureVar"(90)(for path and the picturename),
    * string "questionOption(1-4)Var"(140), boolean "questionCorrect(1-4)Var", string "explanationVar"(300)
    * number "difficultyVar" (options are [1, 2, 3]).
    * 
    * With (1-4) add one of the numbers 
    * to the end of the variablename as a part of the name e.g. questionCorrectVar1.
    * (300) and (140) are number of characters.
    */

   POST api/content/complete

   /**
    * this GET should be called when a game is needed to begin. 
    * You can add number[] of "categories" and number "limit" to get a fixed number
    * of scenarios and from fixed categories. With empty input 
    * gives 10  scenarios from all categories. 
    *
    * PS: Difficulty will be added with a number (1-3) "difficulty".
    */

   GET api/content/startgame



   /**
    * GET that gets all scenarios from the database with all the info.
    * Doesn't use any parameters.
    */

   GET api/content/allscenarios

   /**
    * GETs a list of categories. Simple.
    * Doesn't use any input parameters.
    */

   GET api/content/category



/**
 * All /api/user HTTP methods go to user.
 */


app.use("/api/user", usersRouter);


   /**
    * POST can be used to log in, credentials are to be sent in
    * separate variables in body. "username" and "password". 
    * If correct, POST will return "accesstoken" and "lifetime" in json response.
    * If not, will be an errorcode. 
    */

   POST api/user/login
   

   /**
    * A superuser can use this POST to register new users to the database.
    * user-object needs to be delivered in body, and it needs to have 
    * password and username defined. Role will automatically be user.
    *
    * In sense of username is sent in "newuser.name" and password is sent in 
    * "newuser.password". 
    *
    * Returns statusCode 200 (as usual) if successful. Otherwise something starting
    * with 4 (401, 403) if something went wrong. 
    */

   POST api/user/register 
   
   




